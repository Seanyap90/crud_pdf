name: E2E Test and Merge

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      merge_if_successful:
        description: 'Merge to main if tests pass'
        type: boolean
        default: true

permissions:
  contents: write
  pull-requests: write

jobs:
  e2e-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.12'
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
      
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2
      
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          docker-compose --version
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]  # Install the package in development mode with dev dependencies
          playwright install chromium
      
      - name: Install frontend dependencies
        run: |
          cd iot-client-admin
          npm ci
      
      - name: Start backend services
        run: |
          # Create Docker network first (same as iot.cli would do)
          echo "Creating Docker network..."
          docker network create iot-network || true
          echo "Docker network created"
          
          echo "Starting Docker containers (MQTT broker and gateway simulator)..."
          cd src/iot && docker-compose build --no-cache gateway-simulator
          docker-compose up -d mqtt-broker
          
          echo "Waiting for MQTT broker to initialize..."
          sleep 3
          
          echo "Starting FastAPI backend..."
          cd .. && python -m iot.cli start --mode local --docker-network iot-network --force-environment github_actions &
          
          # Wait for backend to be available
          echo "Waiting for backend to start..."
          cd .. # Return to root directory
          timeout 60s bash -c 'until curl -s http://localhost:8000/health > /dev/null; do sleep 2; echo "Waiting..."; done'
          echo "Backend is available"
      
      - name: Setup Xvfb for visible browser
        run: |
          sudo apt-get install -y xvfb
          Xvfb :99 -screen 0 1280x1024x24 &
          echo "DISPLAY=:99" >> $GITHUB_ENV
      
      - name: Start frontend
        run: |
          echo "Starting frontend..."
          cd iot-client-admin
          npm run dev &
          
          # Wait for frontend to be available
          echo "Waiting for frontend to start..."
          timeout 60s bash -c 'until curl -s http://localhost:3000 > /dev/null; do sleep 2; echo "Waiting..."; done'
          echo "Frontend is available"
      
      - name: Run E2E tests
        id: e2e_tests
        run: |
          # Set environment variable for test
          export HEADLESS=0  # Run with visible browser for better debugging
          
          # Run the test
          python -m pytest tests/e2e/test_gateway_lifecycle.py::test_add_gateway_and_verify_connection -v
          
          # Store exit code
          echo "test_exit_code=$?" >> $GITHUB_ENV
      
      - name: Collect Docker logs on failure
        if: ${{ env.test_exit_code != '0' }}
        run: |
          echo "Collecting Docker logs..."
          mkdir -p logs
          
          # List Docker containers
          docker ps -a > logs/docker-containers.txt
          
          # Get container logs
          for container in $(docker ps -a --format "{{.Names}}"); do
            echo "Getting logs for $container"
            docker logs $container > logs/docker-$container.log 2>&1
          done
          
          # Get backend logs if available
          if [ -f "backend.log" ]; then
            cp backend.log logs/
          fi
          
          # Create a single log archive
          tar -czf logs.tar.gz logs/
      
      - name: Upload test logs
        if: ${{ env.test_exit_code != '0' }}
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: logs.tar.gz
      
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          if-no-files-found: ignore
      
      - name: Merge to main if tests passed
        if: ${{ env.test_exit_code == '0' && (github.event_name == 'workflow_dispatch' && github.event.inputs.merge_if_successful == 'true' || github.event_name == 'pull_request') }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          
          # For pull requests, use GitHub API to merge
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            PR_NUMBER=${{ github.event.pull_request.number }}
            REPO="${{ github.repository }}"
            
            echo "Approving and merging PR #$PR_NUMBER"
            
            # Approve the PR
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${REPO}/pulls/${PR_NUMBER}/reviews" \
              -d '{"event":"APPROVE","body":"E2E tests passed. Approving PR."}'
            
            # Merge the PR
            curl -X PUT \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${REPO}/pulls/${PR_NUMBER}/merge" \
              -d '{"commit_title":"Merge PR #'"${PR_NUMBER}"': E2E tests passed","commit_message":"Auto-merge after successful E2E tests","merge_method":"merge"}'
          
          # For manual workflow, do direct merge
          else
            BRANCH=$(git rev-parse --abbrev-ref HEAD)
            
            echo "Merging branch $BRANCH to main"
            git fetch origin main
            git checkout main
            git pull origin main
            git merge --no-ff $BRANCH -m "Merge branch '$BRANCH' after successful E2E tests"
            git push origin main
          fi
      
      - name: Clean up
        if: always()
        run: |
          echo "Cleaning up resources..."
          
          # Kill frontend process
          pkill -f "npm start" || true
          
          # Stop backend API
          pkill -f "src.iot.cli start" || true
          
          # Stop and remove Docker containers
          cd src/iot && docker-compose down || true
          
          # Remove any gateway containers
          docker ps -a --filter "name=gateway-" -q | xargs -r docker rm -f || true
          
          echo "Cleanup completed"