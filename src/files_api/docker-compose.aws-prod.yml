version: '3.8'

services:
  # MongoDB Service - uses EFS for persistent data storage
  mongodb:
    image: mongo:7.0
    container_name: ${APP_NAME:-crud-pdf}-mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE:-crud_pdf}
    volumes:
      # EFS mount for MongoDB data persistence
      - type: bind
        source: ${EFS_MONGODB_MOUNT_PATH:-/mnt/efs/mongodb}
        target: /data/db
      # MongoDB configuration
      - type: bind
        source: ${EFS_MONGODB_MOUNT_PATH:-/mnt/efs/mongodb}/config
        target: /data/configdb
    ports:
      - "27017:27017"
    networks:
      - aws-prod-network
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    logging:
      driver: awslogs
      options:
        awslogs-group: ${CLOUDWATCH_LOG_GROUP:-/ecs/crud-pdf-mongodb}
        awslogs-region: ${AWS_DEFAULT_REGION:-us-east-1}
        awslogs-stream-prefix: mongodb

  # VLM Worker Service - uses EFS for model cache
  vlm-worker:
    image: ${ECR_REPO_NAME:-crud-pdf-vlm}:${IMAGE_TAG:-latest}
    environment:
      # Core deployment configuration
      - DEPLOYMENT_MODE=aws-prod
      - QUEUE_TYPE=aws-prod
      
      # AWS Configuration
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN:-}
      
      # S3 Configuration
      - S3_BUCKET_NAME=${S3_BUCKET_NAME:-rag-pdf-storage}
      
      # SQS Configuration
      - SQS_QUEUE_NAME=${SQS_QUEUE_NAME:-rag-task-queue}
      - SQS_QUEUE_URL=${SQS_QUEUE_URL}
      
      # MongoDB Configuration
      - MONGO_URI=mongodb://${MONGO_USERNAME:-admin}:${MONGO_PASSWORD:-password}@mongodb:27017/${MONGO_DATABASE:-crud_pdf}?authSource=admin
      
      # Model Configuration
      - MODEL_MEMORY_LIMIT=${MODEL_MEMORY_LIMIT:-15GiB}
      - DISABLE_DUPLICATE_LOADING=${DISABLE_DUPLICATE_LOADING:-true}
      - MAX_CONTENT_LENGTH=256
      - LOW_MEMORY=false  # Production mode with full GPU memory
      - OFFLOAD_TO_CPU=false
      - CACHE_IMPLEMENTATION=standard
      
      # CUDA optimization for production
      - CUDA_VISIBLE_DEVICES=0
      - PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512,garbage_collection_threshold:0.6
      
      # CPU threading optimization
      - OMP_NUM_THREADS=16
      - MKL_NUM_THREADS=12
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
      # Model cache - using EFS mount
      - MODEL_CACHE_DIR=/efs/models
      - TRANSFORMERS_CACHE=/efs/models/transformers
      - HF_HOME=/efs/models/hub
      - HF_HUB_OFFLINE=1  # Use offline mode with EFS cached models
      
      # ECS-specific environment variables
      - ECS_CLUSTER_NAME=${ECS_CLUSTER_NAME}
      - ECS_SERVICE_NAME=${ECS_SERVICE_NAME:-vlm-worker}
      - ECS_TASK_ARN=${ECS_TASK_ARN:-}
      - ECS_TASK_DEFINITION_FAMILY=${ECS_TASK_DEFINITION_FAMILY:-crud-pdf-vlm-worker}
      
      # API Configuration
      - API_BASE_URL=${API_BASE_URL:-https://api.example.com}
      
    volumes:
      # EFS mount for model storage
      - type: bind
        source: ${EFS_MODELS_MOUNT_PATH:-/mnt/efs/models}
        target: /efs/models
        read_only: false
    
    depends_on:
      mongodb:
        condition: service_healthy
    
    deploy:
      mode: replicated
      replicas: ${VLM_WORKER_REPLICAS:-0}  # Start with 0 for scale-to-zero
      resources:
        limits:
          memory: 24G
          cpus: '8'
        reservations:
          memory: 16G
          cpus: '4'
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    
    shm_size: 8gb
    runtime: nvidia
    
    networks:
      - aws-prod-network
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import torch; print(torch.cuda.is_available())' || exit 1"]
      interval: 120s
      timeout: 30s
      retries: 3
      start_period: 600s  # 10 minutes for model loading
    
    logging:
      driver: awslogs
      options:
        awslogs-group: ${CLOUDWATCH_LOG_GROUP:-/ecs/crud-pdf-vlm-worker}
        awslogs-region: ${AWS_DEFAULT_REGION:-us-east-1}
        awslogs-stream-prefix: vlm-worker

  # Model Health Validator - validates EFS models on startup
  model-validator:
    image: ${ECR_REPO_NAME:-crud-pdf-vlm}:${IMAGE_TAG:-latest}
    environment:
      - MODEL_CACHE_DIR=/efs/models
      - TRANSFORMERS_CACHE=/efs/models/transformers
      - HF_HOME=/efs/models/hub
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - type: bind
        source: ${EFS_MODELS_MOUNT_PATH:-/mnt/efs/models}
        target: /efs/models
        read_only: true
    command: python -m files_api.aws.efs_health_validator --validate-only
    networks:
      - aws-prod-network
    restart: "no"  # Run once and exit
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 2G
          cpus: '1'
    logging:
      driver: awslogs
      options:
        awslogs-group: ${CLOUDWATCH_LOG_GROUP:-/ecs/crud-pdf-model-validator}
        awslogs-region: ${AWS_DEFAULT_REGION:-us-east-1}
        awslogs-stream-prefix: model-validator

networks:
  aws-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: ${COMPOSE_NETWORK_SUBNET:-172.20.0.0/16}

# External volumes - these are EFS mount points managed by infrastructure
# The actual EFS file systems are created by deploy_ecs.py --infrastructure-only
# Mount points should be created before running this compose file:
#   sudo mkdir -p /mnt/efs/mongodb /mnt/efs/models
#   sudo mount -t efs ${EFS_MONGODB_ID}:/ /mnt/efs/mongodb
#   sudo mount -t efs ${EFS_MODELS_ID}:/ /mnt/efs/models

# Usage:
# 1. Run infrastructure deployment: python -m files_api.aws.deploy_ecs --infrastructure-only
# 2. Export EFS configuration: source .env.aws-prod
# 3. Mount EFS file systems to local paths
# 4. Run compose: docker-compose -f docker-compose.aws-prod.yml up
# 5. Scale workers: docker-compose -f docker-compose.aws-prod.yml up --scale vlm-worker=3

# Environment variables required:
# - EFS_MONGODB_MOUNT_PATH: Local mount path for MongoDB EFS
# - EFS_MODELS_MOUNT_PATH: Local mount path for models EFS
# - ECR_REPO_NAME: ECR repository for VLM worker image
# - AWS credentials and region
# - SQS_QUEUE_URL: Full SQS queue URL
# - ECS_CLUSTER_NAME: Target ECS cluster name